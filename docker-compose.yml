---
version: '3'
services:
  ## MySQL Docker Compose Config
  postgres-order:
    container_name: postgres-order
    image: postgres
    environment:
      POSTGRES_DB: order-service
      POSTGRES_USER: ptechie
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - ./postgres-order:/data/postgres
    expose:
      - "5431"
    ports:
      - "5436:5431"
    command: -p 5431
    restart: unless-stopped
    networks:
      - mynetwork

#  postgres-inventory:
#    container_name: postgres-inventory
#    image: postgres
#    environment:
#      POSTGRES_DB: inventory-service
#      POSTGRES_USER: ptechie
#      POSTGRES_PASSWORD: password
#      PGDATA: /data/postgres
#    volumes:
#      - ./postgres-inventory:/data/postgres
#    ports:
#      - "5437:5432"
#    restart: unless-stopped
#    networks:
#      - mynetwork

  mysql-inventory:
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 1qaz3EDC
      MYSQL_DATABASE: inventory_services
    ports:
      - "3308:3306"
    networks:
      - mynetwork


  ## Mongo Docker Compose Config
  mongo:
    container_name: mongo
    image: mongo:4.4.14-rc0-focal
    restart: unless-stopped
    ports:
      - "27018:27017"
    expose:
      - "27017"
    volumes:
      - ./mongo-data:/data/db
    networks:
      - mynetwork

  ## Keycloak Config with Mysql database
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:5.7
    volumes:
      - ./mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password

  keycloak:
    container_name: keycloak
    image: docker.hpc.ipm.ac.ir/keycloak/keycloak:18.0.0
    command: ["start-dev","--import-realm"]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

#  ##
#    :
#    image: open  /
#    container_name:
#    ports:
#      - "9411:9411"

  ## Eureka Server
  discovery-server:
    image: aroosha269/discovery-server:latest
    container_name: discovery-server
    # noinspection ComposeUnknownKeys
    pull_policy: always
    ports:
      - "8762:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - mynetwork


  api-gateway:
    image: aroosha269/api-gateway:latest
    container_name: api-gateway
    # noinspection ComposeUnknownKeys
    pull_policy: always
    ports:
      - "8090:8086"
    expose:
      - "8090"
    volumes:
      - ./config/application-docker.properties:/config/application-docker.properties

    environment:
      - SPRING_PROFILES_ACTIVE=docker
#      - EUREKA_SERVER=http://discovery-server:8761/eureka/
#      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
      - discovery-server
      - keycloak
    networks:
      - mynetwork


  ## Product-Service Docker Compose Config
  product-service:
    container_name: product-service
    image: aroosha269/product-service:latest
    # noinspection ComposeUnknownKeys
    pull_policy: always
    ports:
      - "8091:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo
      - discovery-server
      - api-gateway
    networks:
      - mynetwork

  ## Order-Service Docker Compose Config
  order-service:
    container_name: order-service
    image: aroosha269/order-service:latest
    # noinspection ComposeUnknownKeys
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5436/order-service
    depends_on:
      - postgres-order
      - broker
      - discovery-server
      - api-gateway
    networks:
      - mynetwork

  ## Inventory-Service Docker Compose Config
  inventory-service:
    container_name: inventory-service
    image: aroosha269/inventory-service:latest
    # noinspection ComposeUnknownKeys
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inventory-service
      - SPRING_DATASOURCE_URL= jdbc:mysql://mysql:3306/inventory_services
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD =1qaz3EDC
    depends_on:
      - mysql-inventory
      - discovery-server
      - api-gateway
    networks:
      - mynetwork

#  ## Notification-Service Docker Compose Config
#  notification-service:
#    container_name: notification-service
#    image: aroosha269/notification-service:latest
#    # noinspection ComposeUnknownKeys
#    pull_policy: always
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#    depends_on:
#      - broker
#      - discovery-server
#      - api-gateway

  ## Prometheus
  prometheus:
    image: prom/prometheus:v2.37.1
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - product-service
      - inventory-service
      - order-service
#      - notification-service
    networks:
      - mynetwork

  grafana:
    image: grafana/grafana-oss:8.5.2
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    networks:
      - mynetwork


networks:
  mynetwork:
    driver: bridge